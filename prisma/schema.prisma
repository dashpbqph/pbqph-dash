generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemAbbrev {
  SiNAT
  SiAC
  SiMaC
}

enum SystemType {
  NAO_SE_APLICA
  CONVENCIONAL
  INOVACAO
}

model System {
  name   String
  abbrev SystemAbbrev
  type   SystemType

  indicators Indicator[]

  @@unique([abbrev, type])
  @@map("systems")
}

enum ImpactNature {
  AMBIENTAL
  ECONOMICA
  LEGAL
  SOCIAL
  GERENCIAL
  TECNOLOGICA
}

enum ImpactedAgent {
  EMPRESA_CONSTRUTORA
  FABRICANTE
  TRABALHADOR
  SOCIEDADE
}

enum Polarity {
  POSITIVA
  NEGATIVA
}

enum Periodicity {
  EVENTUAL
  ANUAL
  SEMESTRAL
  TRIMESTRAL
  MENSAL
}

enum Category {
  DESEMPENHO
  ESTRATEGICO
  RESULTADO
}

enum Region {
  NORTE
  NORDESTE
  SUDESTE
  SUL
  CENTRO_OESTE
}

enum Group {
  OBRA
  EMPRESA
  CONJUNTO_EMPRESAS
}

model Indicator {
  id                   String          @id @default(cuid())
  category             Category
  group                Group?
  index                Int             @default(autoincrement())
  code                 String          @unique
  codeMarkdown         String
  name                 String
  unit                 String
  decimalPlaces        Int             @default(1)
  polarity             Polarity
  cumulative           Boolean
  source               String
  periodicity          Periodicity
  impactNatures        ImpactNature[]
  impactedAgents       ImpactedAgent[]
  purpose              String
  equationMarkdown     String
  equationVarsMarkdown String

  stratifiedByRegion    Boolean @default(false)
  stratifiedByCompany   Boolean @default(false)
  stratifiedByProject   Boolean @default(false)
  stratifiedByOAC       Boolean @default(false)
  stratifiedByPSQ       Boolean @default(false)
  stratifiedByGuideline Boolean @default(false)

  system       System           @relation(fields: [systemAbbrev, systemType], references: [abbrev, type], onDelete: Cascade)
  systemAbbrev SystemAbbrev
  systemType   SystemType
  values       IndicatorValue[]

  @@map("indicators")
}

model IndicatorValue {
  id        String   @id @default(cuid())
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  indicator   Indicator @relation(fields: [indicatorId], references: [id])
  indicatorId String

  region      Region?
  company     Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?
  oac         Oac?       @relation(fields: [oacId], references: [id])
  oacId       String?
  psq         Psq?       @relation(fields: [psqId], references: [id])
  psqId       String?
  guideline   Guideline? @relation(fields: [guidelineId], references: [id])
  guidelineId String?

  @@map("indicator_values")
}

model Oac {
  id   String @id @default(cuid())
  name String @unique

  indicatorValues IndicatorValue[]

  @@map("oacs")
}

model Company {
  id   String @id @default(cuid())
  name String @unique

  employees User[]

  projects        Project[]
  indicatorValues IndicatorValue[]

  @@map("companies")
}

model Project {
  id   String @id @default(cuid())
  name String @unique

  company         Company          @relation(fields: [companyId], references: [id])
  companyId       String
  indicatorValues IndicatorValue[]

  @@map("projects")
}

model Egt {
  id   String @id @default(cuid())
  name String @unique

  @@map("egts")
}

model Em {
  id   String @id @default(cuid())
  name String @unique

  @@map("ems")
}

model Psq {
  id   String @id @default(cuid())
  name String @unique

  indicatorValues IndicatorValue[]

  @@map("psqs")
}

model Ita {
  id   String @id @default(cuid())
  name String @unique

  @@map("itas")
}

model Fad {
  id   String @id @default(cuid())
  name String @unique

  @@map("fads")
}

model Guideline {
  id   String @id @default(cuid())
  name String @unique // int string: 001, 002, 003, ...

  indicatorValues IndicatorValue[]

  @@map("guidelines")
}

model Datec {
  id   String @id @default(cuid())
  name String @unique

  @@map("datecs")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  MEMBER
}

model Role {
  id   String   @id @default(cuid())
  role UserRole @unique

  users User[]

  @@map("roles")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  firstName String
  lastName  String?
  password  String
  salt      String
  email     String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?

  @@map("users")
}
